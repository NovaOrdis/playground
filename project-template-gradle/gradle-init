#!/usr/bin/env bash

VERBOSE=false

function display-help() {

cat <<EOF

Utility that initializes a Gradle playground project, optionally using another project
as template.

Usage:

    gradle-init [-v] <project-root-path> [path-to-project-to-use-as-template]

Example:

    gradle-init ./spdy-okhttp

The <project-root-path> is the absolute or relative project root path and the directory
that will be created. The command will fail if the directory exists. The initialization
script will interactively query for project elements, such as the initial package name,
user-friendly project name to be used by IntelliJ IDEA, etc.

The initialization script will create the initial package and a simple Main class, will
initialize build.gradle with the minimal configuration required to build a Java project
and it will put in place the run wrapper.

If a path to a "template project" is provided, the infrastructure of that project will
be used to borrow some of the configuration elements:

* Gradle build.gradle repositories and dependencies.


EOF
}

function error() {

    echo "[error]: $@" 1>&2
}

function warn() {

    echo "[warn]: $@" 1>&2
}

function debug() {

    ${VERBOSE} && echo "$@" 1>&2;
}

function main() {

    local project_root_dir
    local template_project_root_dir

    while [ -n "$1" ]; do

        if [ "$1" = "--help" -o "$1" = "help" ]; then

            display-help
            exit 0

        elif [ "$1" = "-v" ]; then

            VERBOSE=true

        elif [ -z "${project_root_dir}" ]; then

            project_root_dir=$1

        elif [ -z "${template_project_root_dir}" ]; then

            template_project_root_dir=$1

        else

            error "unknown option $1"
            exit 1
        fi
        shift
    done

    [ -z "${project_root_dir}" ] && { display-help; exit 1; }

    [ -d ${project_root_dir} ] && { error "project root directory ${project_root_dir} exists"; exit 1; }

    if [ -n "${template_project_root_dir}" ]; then

        [ -d ${template_project_root_dir} ] || { error "the template project '${template_project_root_dir}' does not seem to exist"; exit 1; }
    fi

    check-prerequisites

    create-project-root ${project_root_dir}
    run-gradle-init ${project_root_dir}
    remove-unnecessary-gradle-init-files ${project_root_dir}
    initialize-gitignore ${project_root_dir}

    local main_java_dir
    main_java_dir=$(create-main-java-dir ${project_root_dir}) || exit 1

    local package_name
    package_name=$(initialize-code ${main_java_dir}) || exit 1

    add-minimal-build-gradle-config ${project_root_dir} ${template_project_root_dir}
    setup-maven-coordinates ${project_root_dir}

    #
    # TODO temporarily abandoned, as setting .idea/.name prevents IDEA from correctly initially importing the project
    #
    #setup-intellij-idea-project-name ${project_root_dir}

    setup-bash-wrapper ${project_root_dir} ${package_name}
}

function check-prerequisites() {

    #
    # we need GNU sed
    #

    local test
    test=$(echo "a" | sed -e 's/\(.\)/\U\1/')

    if [ "${test}" != "A" ]; then
        error "We detected a BSD sed, and we need GNU sed. Consider installing the GNU sed.";
        exit 1
    fi
}

function create-project-root() {

    local project_root_dir=$1

    mkdir -p ${project_root_dir} && debug "created ${project_root_dir}"
}

function run-gradle-init() {

    local project_root_dir=$1

    (cd ${project_root_dir}; gradle -q init) && debug "ran gradle init"
}

function remove-unnecessary-gradle-init-files() {

    local project_root_dir=$1

    rm ${project_root_dir}/gradlew && debug "removed gradlew"
    rm ${project_root_dir}/gradlew.bat && debug "removed gradlew.bat"
    rm -r ${project_root_dir}/.gradle && debug "removed .gradle"
    rm -r ${project_root_dir}/gradle && debug "removed gradle"
}

function initialize-gitignore(){

    local project_root_dir=$1

    (cd ${project_root_dir}; \
        curl -s -O https://raw.githubusercontent.com/ovidiuf/templates/master/reference-gitignore)

    mv ${project_root_dir}/reference-gitignore ${project_root_dir}/.gitignore && debug "installed reference .gitignore"
}

#
# returns the path of the main source directory created at stdout
#
function create-main-java-dir(){

    local project_root_dir=$1

    local main_java_dir=${project_root_dir}/src/main/java

    mkdir -p ${main_java_dir} && debug "created src/main/java" 1>&2

    echo ${main_java_dir}
}

#
# Returns the name of initialized package at stdout or nothing if no package was initialized.
#
function initialize-code() {

    local main_java_dir=$1
    local proposed_package_name=$(get-proposed-package-name $(dirname $(dirname $(dirname ${main_java_dir}))))
    local package_name
    read -p "name of the package to initialize [${proposed_package_name}]: " package_name

    [ -z "${package_name}" ] && package_name=${proposed_package_name}

    local relative_dir=${package_name//./\/}
    local dir=${main_java_dir}/${relative_dir}

    mkdir -p ${dir} && debug "created ${dir}"

    (cat << EOF
package ${package_name};

public class Main {

    public static void main(String[] args) {

        System.out.println(".");
    }
}
EOF
) > ${dir}/Main.java && debug "created ${dir}/Main.java"

    echo "${package_name}"
}

#
# returns the fully qualified proposed package name at stdout
#
function get-proposed-package-name() {

    local project_root_dir=$1

    debug "get-proposed-package-name() project_root_dir: ${project_root_dir}"

    local absolute_project_root_dir=$(cd ${project_root_dir}; pwd)

    debug "absolute project root dir: ${absolute_project_root_dir}"

    local proposed_name=${absolute_project_root_dir}
    proposed_name=${proposed_name#/Users/ovidiu/}

    #
    # replace each -<char> with <UpperCaseChar> - turn it in camel case. We need GNU sed for this.
    #
    proposed_name=$(echo ${proposed_name} | sed -e 's/-\(.\)/\U\1/g')

    proposed_name="io.novaordis.${proposed_name}"

    proposed_name=${proposed_name//\//.}
    debug "proposed name: ${proposed_name}"
    echo ${proposed_name}
}

function add-minimal-build-gradle-config() {

    local project_root_dir=$1
    local template_project_root_dir=$2 # optional, if provided we'll try to borrow configuration from this project

    (cat << EOF

apply plugin: 'java'

EOF
) >> ${project_root_dir}/build.gradle && debug "updated ${project_root_dir}/build.gradle"

    #
    # this is the place where we place repositories
    #

    local repositories_from_template=$(get-repositories-from-project-template ${template_project_root_dir})

    [ -n "${repositories_from_template}" ] && echo "${repositories_from_template}" >> ${project_root_dir}/build.gradle

    #
    # this is the place where we place dependencies
    #

    local dependencies_from_template=$(get-dependencies-from-project-template ${template_project_root_dir})

    [ -n "${dependencies_from_template}" ] && echo "${dependencies_from_template}" >> ${project_root_dir}/build.gradle

    #
    # we always need this
    #

    (cat << EOF

task printClasspath {
        doLast {
            configurations.runtimeClasspath.each { print it; print ':' }
        }
}

EOF
) >> ${project_root_dir}/build.gradle && debug "updated ${project_root_dir}/build.gradle"
}

#
# return the path of build.gradle for the given project directory. If something is returned, it means the file
# exists. Otherwise, we warn at stderr and return 1
#
function get-build-gradle-that-exists() {

    local template_project_root_dir=$1

    [ -z "${template_project_root_dir}" ] && return 0

    [ -d ${template_project_root_dir} ] || { warn "the template project directory '${template_project_root_dir}' does not exist so no configuration will be borrowed"; return 1; }

    local source_build_gradle=${template_project_root_dir}/build.gradle

    [ -f ${source_build_gradle} ] || { warn "the template project directory '${template_project_root_dir}' does not have a build.gradle file, so no configuration will be borrowed"; return 1; }

    echo "${source_build_gradle}"
}

#
# returns an empty string if the repositories section does not exist or there's something wrong with the project
# template; otherwise returns the multi-line repositories { ... } section at stdout.
#
function get-repositories-from-project-template() {

    local template_project_root_dir=$1

    local source_build_gradle=$(get-build-gradle-that-exists ${template_project_root_dir})

    [ -z "${source_build_gradle}" ] && return 0

    cat ${source_build_gradle} | awk '/^repositories/ { print_on = 1 } /^}/ { if (print_on) { print "}" }; print_on = 0; } { if (print_on) { print $0 } }'
}

#
# returns an empty string if the dependencies section does not exist or there's something wrong with the project
# template; otherwise returns the multi-line dependencies { ... } section at stdout.
#
function get-dependencies-from-project-template() {

    local template_project_root_dir=$1

    local source_build_gradle=$(get-build-gradle-that-exists ${template_project_root_dir})

    [ -z "${source_build_gradle}" ] && return 0

    cat ${source_build_gradle} | awk '/^dependencies/ { print_on = 1 } /^}/ { if (print_on) { print "}" }; print_on = 0; } { if (print_on) { print $0 } }'
}

function setup-maven-coordinates() {

    local project_root_dir=$1
    local build_gradle_file=${project_root_dir}/build.gradle
    [ ! -f ${build_gradle_file} ] && { error "the Gradle build file ${build_gradle_file} not found, it should have been initialized by one of the previous steps"; exit 1; }

    #
    # TODO
    #
}

function setup-intellij-idea-project-name() {

    #
    # TODO temporarily abandoned, as setting .idea/.name prevents IDEA from correctly initially importing the project
    #

    local project_root_dir=$1

    local idea_dir=${project_root_dir}/.idea

    [ ! -d ${idea_dir} ] && mkdir -p ${idea_dir}

    local crt=$(basename ${project_root_dir})
    local idea_project_name
    read -p "name of the IntelliJ IDEA project name [${crt}]: " idea_project_name

    [ -z "${idea_project_name}" ] && return 0

    echo "${idea_project_name}" > ${idea_dir}/.name
}

function setup-bash-wrapper() {

    local project_root_dir=$1
    local package_name=$2

    mkdir ${project_root_dir}/bin && debug "created ${project_root_dir}/bin"

    (cd ${project_root_dir}/bin; \
        curl -s -O https://raw.githubusercontent.com/ovidiuf/shell-tools/master/lib/bash.shlib; \
        curl -s -O https://raw.githubusercontent.com/ovidiuf/shell-tools/master/lib/gradle/gradle.shlib; \
        curl -s -O https://raw.githubusercontent.com/ovidiuf/shell-tools/master/lib/gradle/gradle-run-wrapper-template) || \
        { error "failed to download templates from https://raw.githubusercontent.com/ovidiuf/templates/master"; exit 1; }

    #
    # substitute the value of MAIN_CLASS
    #

    sed 's/^MAIN_CLASS=.*$/MAIN_CLASS='${package_name}.Main'/' ${project_root_dir}/bin/gradle-run-wrapper-template > ${project_root_dir}/bin/run && \
        debug "created ${project_root_dir}/bin/run from template ${project_root_dir}/bin/gradle-run-wrapper-template"
    rm ${project_root_dir}/bin/gradle-run-wrapper-template && debug "removed ${project_root_dir}/bin/gradle-run-wrapper-template"
    chmod a+x ${project_root_dir}/bin/run && debug "made ${project_root_dir}/run executable"
}

main "$@"
